import random
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

from db import (
    get_random_word,
    get_variants,
    add_word,
    delete_word,
    count_user_words
)

print('Start telegram bot...')

state_storage = StateMemoryStorage()
token_bot = '7974218001:AAFh6z3Hnd7uLs-HjwgTQ1XEtYNIkLa2NTc'  
bot = TeleBot(token_bot, state_storage=state_storage)

known_users = []
userStep = {}
buttons = []


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠Ô∏è'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –∫–∞—Ä—Ç–æ—á–∫–∏
@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    cid = message.chat.id
    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
        greeting = (
            "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
            "–¢—ã –º–æ–∂–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —É–¥–æ–±–Ω–æ–º —Ç–µ–º–ø–µ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n"
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
            "üîô –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n\n"
            "–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è"
        )
        bot.send_message(cid, greeting)

    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []

    # –ë–µ—Ä—ë–º —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã
    target_data = get_random_word(cid)
    target_word = target_data['eng_word']
    translate = target_data['rus_word']

    # –í–∞—Ä–∏–∞–Ω—Ç—ã
    others = get_variants(target_word)
    buttons = [types.KeyboardButton(word) for word in others]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word_handler(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        delete_word(message.chat.id, data['target_word'])
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ {data['target_word']} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ç–≤–æ–µ–π –±–∞–∑—ã ‚úÖ")


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word_handler(message):
    cid = message.chat.id
    bot.send_message(cid, "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `english - —Ä—É—Å—Å–∫–∏–π`")
    userStep[cid] = 1  # –∂–¥—ë–º –≤–≤–æ–¥ —Å–ª–æ–≤–∞


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    cid = message.chat.id
    text = message.text

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
    if userStep.get(cid) == 1:
        try:
            eng, rus = text.split('-')
            eng, rus = eng.strip(), rus.strip()
            add_word(cid, eng, rus)
            total = count_user_words(cid)
            bot.send_message(cid, f"–°–ª–æ–≤–æ '{eng} - {rus}' –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {total} —Å–ª–æ–≤.")
        except Exception:
            bot.send_message(cid, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —Ç–∞–∫: `word - –ø–µ—Ä–µ–≤–æ–¥`")
        userStep[cid] = 0
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§Ô∏è", hint]
            hint = show_hint(*hint_text)
        else:
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üá∑üá∫ {data['translate_word']}")

    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)

